services:
  nginx:
    image: nginx:1.29
    container_name: load-balancer
    ports:
      - "9999:9999"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: unless-stopped
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "50MB"

  payments-api-1: &payments-api
    image: obortoli/rinha-2025:1.0
    container_name: payments-api-1
    expose:
      - "8080"
    depends_on:
      payments-db:
        condition: service_healthy
    environment:
      ASPNETCORE_URLS: "http://+:8080"
      ASPNETCORE_ENVIRONMENT: "Production"
      PROCESSOR_MAIN_URL: $PROCESSOR_MAIN_URL
      PROCESSOR_MAIN_POOL_INTERVAL_STATUS: $PROCESSOR_MAIN_POOL_INTERVAL_STATUS
      PROCESSOR_FALLBACK_URL: $PROCESSOR_FALLBACK_URL
      PROCESSOR_FALLBACK_POOL_INTERVAL_STATUS: $PROCESSOR_FALLBACK_POOL_INTERVAL_STATUS
      ConnectionStrings__PostgressConnection: $DATABASE_CONNECTION
      Logging__LogLevel__Default: "Warning"
    restart: unless-stopped
    networks:
      - backend
      - payment-processor
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "85MB"

  payments-api-2:
    <<: *payments-api
    container_name: payments-api-2

  payments-db:
    image: postgres:17-alpine
    container_name: payments-db
    command: 'postgres -c max_connections=400 -c synchronous_commit=off -c fsync=off -c full_page_writes=off'
    networks:
      - backend
    volumes:
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=payments-db
    ports:
      - "9998:5432" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "130MB"

networks:
  payment-processor:
    external: true
  backend:
    name: backend
    driver: bridge
