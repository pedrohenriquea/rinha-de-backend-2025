name: 'rinha-de-backend-3'

#  1.5 CPUs = 0.2 PostgreSQL/Redis + 2 x 0.55 Spring Boot (1.10)+ 0.2 NGinx
#   350  MB =  30 PostgreSQL/Redis + 2 x  146 Spring Boot (292) +  28 NGinx

services:

  # rinha redis
  javinha-redis:
    image: redis:7.2-alpine
    container_name: javinha-redis
    hostname: javinha-redis
    command: >
      redis-server
      --save ""
      --appendonly no
      --maxmemory 30mb
      --maxmemory-policy allkeys-lru
#    environment:
#      - REDIS_PASSWORD=rinha
    deploy:
      resources:
        limits:
          cpus: "0.20"
          memory: "30MB"
    networks:
      - back-end
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "rinha", "--no-auth-warning", "ping"]
      interval: 10s  # Reduce frequency
      timeout: 1s    # Faster failure detection
      retries: 20
      start_period: 10s

  # rinha API 1
  javinha1: &api
    image: docker.io/boaglio/player456:v4
#    image: docker.io/boaglio/player456:latest
#    image: docker.io/library/player456:1.0.0-SNAPSHOT
    hostname: javinha1
    container_name: javinha1
    networks:
      - back-end
      - payment-processor
    environment:
      - ENABLE_SCHEDULING=true
      - SERVER_PORT=8081
      - REDIS_SERVER=javinha-redis
      - REDIS_PASSWORD=rinha
      - REDIS_PORT=6379
      - PAYMENT_DEFAULT_SERVER=http://payment-processor-default:8080
      - PAYMENT_FALLBACK_SERVER=http://payment-processor-fallback:8080
      - JAVA_OPTS= >-
        -XX:+UseContainerSupport
        -XX:MaxRAMPercentage=70.0
        -XX:InitialRAMPercentage=70.0
        -XX:MaxMetaspaceSize=32m
        -Xss256k
        -XX:+UseSerialGC
        -XX:+UseFastAccessorMethods
        -XX:+DisableExplicitGC
        -XX:-PrintGC
        -XX:-PrintGCDetails
        -XX:-FlightRecorder
        -Xlog:disable
    depends_on:
      javinha-redis:
        condition: service_healthy
    ulimits:
      nofile:
        soft: 1000000
        hard: 1000000
    deploy:
      resources:
        limits:
          cpus: "0.55"
          memory: "146MB"
    healthcheck:
      test: "curl --fail --silent localhost:8081/health | grep UP || exit 1"
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

# rinha API 2
  javinha2:
    <<: *api
    hostname: javinha2
    container_name: javinha2
    environment:
      - ENABLE_SCHEDULING=false
      - SERVER_PORT=8082
      - REDIS_SERVER=javinha-redis
      - REDIS_PASSWORD=rinha
      - REDIS_PORT=6379
      - PAYMENT_DEFAULT_SERVER=http://payment-processor-default:8080
      - PAYMENT_FALLBACK_SERVER=http://payment-processor-fallback:8080
      - JAVA_OPTS= >-
          -XX:+UseContainerSupport
          -XX:MaxRAMPercentage=70.0
          -XX:InitialRAMPercentage=70.0
          -XX:MaxMetaspaceSize=32m
          -Xss256k
          -XX:+UseSerialGC
          -XX:+UseFastAccessorMethods
          -XX:+DisableExplicitGC
          -XX:-PrintGC
          -XX:-PrintGCDetails
          -XX:-FlightRecorder
          -Xlog:disable
    deploy:
      resources:
        limits:
          cpus: "0.55"
          memory: "146MB"
    healthcheck:
      test: "curl --fail --silent localhost:8082/health | grep UP || exit 1"
      interval: 5s
      timeout: 5s
      retries: 20
      start_period: 10s

  # rinha LB
  nginx:
    image: nginx:1.29.0-alpine-slim
    container_name: javinha-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - javinha1
      - javinha2
    ports:
      - "9999:9999"
    ulimits:
      nproc: 1000000
      nofile:
        soft: 1000000
        hard: 1000000
    networks:
      - back-end
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "28MB"

networks:
  back-end:
    driver: bridge
  payment-processor:
    external: true

## rinha database
#  javinha-db:
#    image: postgres:latest
#    container_name: javinha-db
#    hostname: javinha-db
#    environment:
#      - POSTGRES_USER=admin
#      - POSTGRES_PASSWORD=rinha
#      - POSTGRES_DB=rinha2025
#    networks:
#      - back-end
#    volumes:
#      - ./init-db-rinha.sql:/docker-entrypoint-initdb.d/init.sql:ro
#    command: postgres -c checkpoint_timeout=600 -c max_wal_size=2096 -c synchronous_commit=0 -c full_page_writes=0 -c fsync=off -c check_function_bodies=false
#    deploy:
#      resources:
#        limits:
#          cpus: "0.50"
#          memory: "80MB"
#    ulimits:
#      nofile:
#        soft: 1000000
#        hard: 1000000
#    healthcheck:
#      test: ["CMD-SHELL", "sh -c 'pg_isready -U admin -d rinha2025'"]
#      interval: 5s
#      timeout: 5s
#      retries: 20
#      start_period: 10s